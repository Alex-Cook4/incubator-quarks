package quarks.test.connectors.mqtt;

import static org.junit.Assume.assumeTrue;

import java.net.Socket;
import java.net.URI;
import java.util.UUID;

import org.junit.Before;
import org.junit.Ignore;

/**
 * Uses the MQTT test broker at: tcp://test.mosquitto.org:1883
 * 
 * @see http://test.mosquitto.org/
 * 
 * The tests are skipped if unable to connect (e.g., due to firewall config,
 * or the public broker not available for whatever reason).
 */
public class MqttOpenTest extends MqttStreamsTestManual {
    private String uniqueid = UUID.randomUUID().toString().replace('-','_');
    
    @Before
    public void setupAuthInfo() {
        this.authInfo.clear();
        // Skip tests if the MQTT server can't be contacted.
        try {
            URI uri = new URI(getServerURI());
            Socket s = new Socket(uri.getHost(), uri.getPort());
            s.close();
        } catch (Exception e) {
            System.err.println("Unable to connect to MQTT broker "+getServerURI()+" : "+e.getMessage());
            e.printStackTrace();
            assumeTrue(false);
        }
    }
    
    protected String[] getMqttTopics() {
        String[] topics = super.getMqttTopics();
        for (int i =0 ; i < topics.length; i++) {
            topics[i] = uniqueid + "/" + topics[i];
        }
        return topics;
    }
    
    protected String getServerURI() {
        return "tcp://test.mosquitto.org:1883";
    }
    
    protected String newClientId(String name) {
        return uniqueid + "_" + name;
    }
    
    @Ignore
    public void testIdleSubscribe() {}
    @Ignore
    public void testIdlePublish() {}
    @Ignore
    public void testConnectFail() {}
}
